q()
con<-url("http://www.newsru.com","r")
x<-readLines(con)
x
install.packages("swirl")
q()
add<- function(x,y){
x + y
}
add(2,3)
above <- function(x, num){
use <- x > num
x[use]
}
x<-randn(100)
x<-rand(100)
x<[23,323,43,32,12,34,43]
x<-[23,323,43,32,12,34,43]
x<-c([23,323,43,32,12,34,43])
x<-c(23,323,43,32,12,34,43)
above(x,10)
above(x,100)
columnmean <- function(y){
nx <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[, i])
}
}
q()
x<-rnorm(100)
hist(x)
y<rnorm(100)
y<-rnorm(100)
plot(x,y)
plot(x,y)
par(mar=c(2,2,2,2))
plot(x,y)
par(mar=c(4,4,2,2))
plot(x,y)
plot(x,y,pch=20)
plot(x,y,pch=2)
plot(x,y,pch=19)
example(points)
plot(x,y,pch=19)
x<-rnorm(100)
y<-rnorm(100)
plot(x,y,pch=19)
title("Scatterplot")
text(-2,-2,"Lbel")
text(-2,-2,"Label")
legend("topleft",legend="Data",pch=20)
fit<-lm(y~x)
abline(fit,lwd=3, col="magenta")
z<-rpois(300)
z<-rpois(100)
z<-rpois(100,2)
par(mfrom=c(2,1))
par(mfrow=c(2,1))
plot(x,y,pch=20)
plot(x,z,pch=19)
par(mar)
par("mar")
par(mar=c(2,2,1,1))
plot(x,z,pch=19)
plot(x,y,pch=20)
par(mfrow=c(1,2))
plot(x,z,pch=19)
plot(x,y,pch=20)
y<-x+rnorm(100)
g<-g1(2,50)
g<-gl(2,50)
g<-gl(2,50, labels=c("Male","Female"))
str(g)
plot(x,y)
plot(x,y)
plot(x,y, type="n")
q()
library(manipulate)
hist(galton$parent, col="blue", breaks=100)
install.packages("UsingR")
library(UsingR);
data(galton)
par(mfrow=c(1,2))
hist(galton$child, col="blue", breaks=100)
hist(galton$parent, col="blue", breaks=100)
source('C:/Users/Wild/Desktop/R Programming Course/Regression/leastSquares.R')
hist(galton$parent, col="red", breaks=100)
hist(galton$parent, col="blue", breaks=100)
source('C:/Users/Wild/Desktop/R Programming Course/Regression/leastSquares.R')
manipulate(myHist(mu), mu=slider(62,74, step=0.5))
library(manipulate)
myHist<-function(mu){
hist(galton$child, col="blue", breaks=100)
lines(c(mu,mu), c(0,150),col="red", lwd=5 )
mse<-mean((galton$child-mu)^2)
text(63,150, paste("mu = ",mu))
text(63,140, paste("MSE = ", round(mse,2)))
}
manipulate(myHist(mu), mu=slider(62,74, step=0.5))
manipulate(myHist(mu), mu=slider(62,74, step=0.5))
manipulate(myHist(mu), mu=slider(62,74,0.5))
step=
7
library(manipulate)
myHist<-function(mu){
hist(galton$child, col="blue", breaks=100)
lines(c(mu,mu), c(0,150),col="red", lwd=5 )
mse<-mean((galton$child - mu)^2)
text(63,150, paste("mu = ",mu))
text(63,140, paste("MSE = ", round(mse,2)))
}
manipulate(myHist(mu), mu=slider(62,74, step=0.5))
manipulate(myHist(mu), mu = manipulate::slider(62, 74, step = 1))
slider
manipulate::slider
manipulate(myHist(mu), mu = manipulate::slider(62, 74, step = 0.5))
plot(galton$parent,galton$child, pch=19, col="blue")
manipulate(myPlot(beta), beta=manipulate::slider(0.8,1.2, step=0.02))
pch=21, col="black", bg="lightblue",
cex=.15*freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd=3)
points(0,0,cex=2, pch=19)
mse<-mean((y-beta*x)^2)
title(paste("beta=", beta, "mse=", round(mse,3)))
}
manipulate(myPlot(beta), beta=manipulate::slider(0.8,1.2, step=0.02))
cex=0.15*freqData$freq,
cex = 0.15 * freqData$freq ,
cex = 0.15 * freqData$freq
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
y<-galton$child - mean(galton$child)
x<-galton$parent - mean(galton$parent)
freqData<-as.data.frame(table(x,y))
names(freqData)<-c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch=21, col="black", bg="lightblue",
cex = 0.15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
myPlot<-function(beta){
y<-galton$child - mean(galton$child)
x<-galton$parent - mean(galton$parent)
freqData<-as.data.frame(table(x,y))
names(freqData)<-c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch=21, col="black", bg="lightblue",
cex = 0.15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd=3)
points(0,0,cex=2, pch=19)
mse<-mean((y-beta*x)^2)
title(paste("beta=", beta, "mse=", round(mse,3)))
}
manipulate(myPlot(beta), beta=manipulate::slider(0.8,1.2, step=0.02))
xlab = "parent",
myPlot<-function(beta){
myPlot<-function(beta){
source('C:/Users/Wild/Desktop/R Programming Course/Regression/regressionThroughOrigin.R')
source('C:/Users/Wild/Desktop/R Programming Course/Regression/regressionThroughOrigin.R')
source('C:/Users/Wild/Desktop/R Programming Course/Regression/regressionThroughOrigin.R')
source('C:/Users/Wild/Desktop/R Programming Course/Regression/regressionThroughOrigin.R')
source('C:/Users/Wild/Desktop/R Programming Course/Regression/regressionThroughOrigin.R')
source('C:/Users/Wild/Desktop/R Programming Course/Regression/regressionThroughOrigin.R')
source('C:/Users/Wild/Desktop/R Programming Course/Regression/regressionThroughOrigin.R')
lm(I(child-mean(child))~I(parent-mean(parent))-1, data=galton)
source('C:/Users/Wild/Desktop/R Programming Course/Regression/regressionThroughOrigin.R')
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
lm(I(w*(x-mean(x))))
lm(I(w*(x-mean(x))), data=x)
lm
lm(I(x-mean(x)), data=x, weights=w)
lm(I(x-mean(x))~I(x-mean(x))-1, data=x, weights=w)
lm(I(x-mean(x))^2, data=x, weights=w)
z <- x*w
mean(z)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit.origin <- lm( y ~ x - 1 )
summary(fit.origin)
data(mtcars)
fit <- lm(mpg ~ wt, mtcars)
summary(fit)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
m.x <- mean(x)
sd.x <- sd(x)
(x[1] - m.x)/sd.x
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm( y ~ x )
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
featurePlot(x=training[,c("accel_arm_x","accel_arm_y","accel_arm_z")], y=training[,c("accel_belt_x","accel_belt_y","accel_belt_z")],plot="pairs")
setwd("C:\\Users\\Wild\\Desktop\\R Programming Course\\Machine Learning\\project1\\code")
library(caret)
library(kernlab)
library(ggplot2)
data<-read.csv("C:\\Users\\Wild\\Desktop\\R Programming Course\\Machine Learning\\project1\\data\\pml-training.csv")
inTrain<-createDataPartition(y=data$classe, p=0.60, list=FALSE)
training<-data[inTrain,]
testing<-data[-inTrain,]
#taken from http://mlarocca.github.io/07-23-2014/analysis.html since I found it is a great idea to refine data
treshold <- dim(training)[1] * 0.95
#Remove columns with more than 95% of NA or "" values
goodColumns <- !apply(training, 2, function(x) sum(is.na(x)) > treshold  || sum(x=="") > treshold)
#end of taken part
training <- training[, goodColumns]
testing <- testing[, goodColumns]
#retrieve the names of columns
names = colnames(testing)
names<-names[8:59]
#generate graphs for each variable to select the best ones
path="C:\\Users\\Wild\\Desktop\\R Programming Course\\Machine Learning\\project1\\materials\\"
for (name in names) {
fn<-paste(path,name,".jpg", sep = "")
p<-ggplot(training, aes(training[,name], fill = classe)) + geom_histogram(alpha = 0.5, aes(y = ..count..), position = 'identity',binwidth = 5)
p<-p+xlab(name) + ylab("Count")
ggsave(filename=fn, plot=p,width=10, height=6)
}
featurePlot(x=training[,c("accel_arm_x","accel_arm_y","accel_arm_z")], y=training[,c("accel_belt_x","accel_belt_y","accel_belt_z")],plot="pairs")
png(filename=path)
plot(plt)
dev.off()
plt<-featurePlot(x=training[,c("accel_arm_x","accel_arm_y","accel_arm_z")], y=training[,c("accel_belt_x","accel_belt_y","accel_belt_z")],plot="pairs")
png(filename=path)
plot(plt)
dev.off()
png(filename="C:\\Users\\Wild\\Desktop\\R Programming Course\\Machine Learning\\project1\\materials\\plot.png")
plot(plt)
dev.off()
dev.copy(jpeg,filename="plot.jpg");
plt<-featurePlot(x=training[,c("accel_arm_x","accel_arm_y","accel_arm_z")], y=training[,c("accel_belt_x","accel_belt_y","accel_belt_z")],plot="pairs")
dev.copy(jpeg,filename="plot.jpg");
dev.off()
png(filename="C:\\Users\\Wild\\Desktop\\R Programming Course\\Machine Learning\\project1\\materials\\plot.png")
plot(plt)
dev.off()
p1 <-
ggplot(training, aes(x="accel_arm_x", y="accel_arm_y", colour="classe")) +
geom_point(alpha=.3) +
geom_smooth(alpha=.2, size=1) +
ggtitle("Features plotted against each other")
print(p1)
p1 <-
ggplot(training, aes(x="accel_arm_x", y="accel_arm_y", colour=classe)) +
geom_point(alpha=.3) +
geom_smooth(alpha=.2, size=1) +
ggtitle("Features plotted against each other")
print(p1)
p1 <-
ggplot(training, aes(x="accel_arm_x", y="accel_arm_y", colour=classe)) +
geom_point(alpha=.3) +
#geom_smooth(alpha=.2, size=1) +
ggtitle("Features plotted against each other")
print(p1)
p1 <-
ggplot(training, aes(x=roll_arm, y=pitch_arm, colour=classe)) +
geom_point(alpha=.3) +
#geom_smooth(alpha=.2, size=1) +
ggtitle("Features plotted against each other")
print(p1)
name[1]
p1 <-
ggplot(training, aes(x="roll_arm", y=pitch_arm, colour=classe)) +
geom_point(alpha=.3) +
#geom_smooth(alpha=.2, size=1) +
ggtitle("Features plotted against each other")
print(p1)
p1 <-
ggplot(training, aes(x=training[,"roll_arm"], y=pitch_arm, colour=classe)) +
geom_point(alpha=.3) +
#geom_smooth(alpha=.2, size=1) +
ggtitle("Features plotted against each other")
print(p1)
names[1:3]
name3[1]==names[2]
names[1]==names[2]
names[1]!=names[2]
p1 <-
ggplot(training, aes(x=training[,"roll_arm"], y=training[,"roll_arm"], colour=classe)) +
geom_point(alpha=.3) +
geom_smooth(alpha=.2, size=1) +
ggtitle("Features plotted against each other")
print(p1)
for (name1 in names[1:3]){
for (name2 in names[1:3]){
if(name1!=name2){
fn<-paste(path,name1,"-",name2,".jpg", sep = "")
strHead<-(paste,"Features ", name1 " and ", name2," plotted against each other")
p1 <-
ggplot(training, aes(x=training[,name1], y=training[,name2], colour=classe)) +
geom_point(alpha=.3) +
ggtitle(strHead)
ggsave(filename=fn, plot=p,width=10, height=6)
}
}
}
name1=names[1]
name2=names[2]
if(name1!=name2){
fn<-paste(path,name1,"-",name2,".jpg", sep = "")
strHead<-(paste,"Features ", name1 " and ", name2," plotted against each other")
p1 <-
ggplot(training, aes(x=training[,name1], y=training[,name2], colour=classe)) +
geom_point(alpha=.3) +
ggtitle(strHead)
ggsave(filename=fn, plot=p,width=10, height=6)
}
if(name1!=name2){
fn<-paste(path,name1,"-",name2,".jpg", sep = "")
strHead<-paste("Features ", name1 " and ", name2," plotted against each other")
p1 <-
ggplot(training, aes(x=training[,name1], y=training[,name2], colour=classe)) +
geom_point(alpha=.3) +
ggtitle(strHead)
ggsave(filename=fn, plot=p,width=10, height=6)
}
(name1!=name2)
fn<-paste(path,name1,"-",name2,".jpg", sep = "")
strHead<-paste("Features ", name1 " and ", name2," plotted against each other")
if(name1!=name2){
fn<-paste(path,name1,"-",name2,".jpg", sep = "")
strHead<-paste("Features ", name1, " and ", name2," plotted against each other")
p1 <-
ggplot(training, aes(x=training[,name1], y=training[,name2], colour=classe)) +
geom_point(alpha=.3) +
ggtitle(strHead)
ggsave(filename=fn, plot=p,width=10, height=6)
}
path
fn
fn<-paste(path,name1,"-",name2,".jpg", sep = "")
strHead<-paste("Features ", name1, " and ", name2," plotted against each other")
p1 <-
ggplot(training, aes(x=training[,name1], y=training[,name2], colour=classe)) +
geom_point(alpha=.3) +
ggtitle(strHead)
ggsave(filename=fn, plot=p1,width=10, height=6)
fn<-paste(path,name1,"-",name2,".jpg", sep = "")
strHead<-paste("Features ", name1, " and ", name2," plotted against each other")
p1 <-
ggplot(training, aes(x=training[,name1], y=training[,name2], colour=classe)) +
geom_point(alpha=.3) +
ggtitle(strHead)
p1<-p1+xlab(name1) + ylab(name2)
ggsave(filename=fn, plot=p1,width=10, height=6)
path="C:\\Users\\Wild\\Desktop\\R Programming Course\\Machine Learning\\project1\\materials\\plottedTogether\\"
for (name1 in names[1:3]){
for (name2 in names[1:3]){
if(name1!=name2){
fn<-paste(path,name1,"-",name2,".jpg", sep = "")
strHead<-paste("Features ", name1, " and ", name2," plotted against each other")
p1 <-
ggplot(training, aes(x=training[,name1], y=training[,name2], colour=classe)) +
geom_point(alpha=.3) +
ggtitle(strHead)
p1<-p1+xlab(name1) + ylab(name2)
ggsave(filename=fn, plot=p1,width=10, height=6)
}
}
}
path
path="C:\\Users\\Wild\\Desktop\\R Programming Course\\Machine Learning\\project1\\materials\\plottedTogether\\"
for (name1 in names[1:3]){
for (name2 in names[1:3]){
if(name1!=name2){
fn<-paste(path,name1,"-",name2,".jpg", sep = "")
strHead<-paste("Features ", name1, " and ", name2," plotted against each other")
p1 <-
ggplot(training, aes(x=training[,name1], y=training[,name2], colour=classe)) +
geom_point(alpha=.3) +
ggtitle(strHead)
p1<-p1+xlab(name1) + ylab(name2)
ggsave(filename=fn, plot=p1,width=10, height=6)
}
}
}
name1="roll_belt"
name2="pitch_belt"
strHead<-paste("Features ", name1, " and ", name2," plotted against each other")
p1 <-
ggplot(training, aes(x=training[,name1], y=training[,name2], colour=classe)) +
geom_point(alpha=.3) +
ggtitle(strHead)
p1<-p1+xlab(name1) + ylab(name2)
print(p1)
Finally, feature plot of values of different pairs of features has also been considered, e.g:
path="C:\\Users\\Wild\\Desktop\\R Programming Course\\Machine Learning\\project1\\materials\\plottedTogether\\"
for (name1 in names[1:3]){
for (name2 in names[1:3]){
if(name1!=name2){
fn<-paste(path,name1,"-",name2,".jpg", sep = "")
strHead<-paste("Features ", name1, " and ", name2," plotted against each other")
p1 <-
ggplot(training, aes(x=training[,name1], y=training[,name2], colour=classe)) +
geom_point(alpha=.3) +
ggtitle(strHead)
p1<-p1+xlab(name1) + ylab(name2)
ggsave(filename=fn, plot=p1,width=10, height=6)
}
}
}
path="C:\\Users\\Wild\\Desktop\\R Programming Course\\Machine Learning\\project1\\materials\\plottedTogether\\"
for (name1 in names){
for (name2 in names){
if(name1!=name2){
fn<-paste(path,name1,"-",name2,".jpg", sep = "")
strHead<-paste("Features ", name1, " and ", name2," plotted against each other")
p1 <-
ggplot(training, aes(x=training[,name1], y=training[,name2], colour=classe)) +
geom_point(alpha=.3) +
ggtitle(strHead)
p1<-p1+xlab(name1) + ylab(name2)
ggsave(filename=fn, plot=p1,width=10, height=6)
}
}
}
